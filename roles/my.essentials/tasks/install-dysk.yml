# https://github.com/Canop/lfs
# https://github.com/Canop/dysk/releases

- name: "Role: my.essentials - install-dysk.yml - gather package facts"
  ansible.builtin.package_facts:

- name: "Role: my.essentials - install-dysk.yml - check if python3-pip is installed"
  ansible.builtin.debug:
    msg: python3-pip is installed
  when: "'python3-pip' in ansible_facts.packages"

- name: "Role: my.essentials - install-dysk.yml - fail if python3-pip is not installed"
  ansible.builtin.fail:
    msg: python3-pip is not installed
  when: "'python3-pip' not in ansible_facts.packages"

- name: "Role: my.essentials - install-dysk.yml - check if github3.py is installed"
  ansible.builtin.command: pip show github3.py
  register: pip_show_result
  ignore_errors: true
  changed_when: pip_show_result.rc != 0

- name: "Role: my.essentials - install-dysk.yml - install github3.py if not present"
  ansible.builtin.pip:
    name: github3.py
    state: present
  when: pip_show_result.rc != 0

- name: "Role: my.essentials - install-dysk.yml - get the latest release version"
  community.general.github_release:
    user: Canop
    repo: dysk
    action: latest_release
  register: release

- name: "Role: my.essentials - install-dysk.yml - show the latest release version"
  ansible.builtin.debug:
    var: release

- name: "Role: my.essentials - install-dysk.yml - creatae /tmp/install-dysk directory"
  ansible.builtin.file:
    path: /tmp/install-dysk
    state: directory
    mode: '0755'

- name: "Role: my.essentials - install-dysk.yml - download and unarchive the file src_file"
  ansible.builtin.unarchive:
    src: "https://github.com/Canop/dysk/releases/download/{{ release['tag'] }}/dysk_{{ release['tag'] | regex_replace('^v', '') }}.zip"
    dest: /tmp/install-dysk
    remote_src: true

- name: "Role: my.essentials - install-dysk.yml - determine system architecture"
  ansible.builtin.set_fact:
    arch: "{{ ansible_architecture | lower }}"

- name: "Role: my.essentials - install-dysk.yml - Copy dysk binary to /usr/local/bin"
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: /usr/local/bin/dysk
    mode: '0755'
    remote_src: true
  when: ansible_architecture == item.architecture
  loop:
    - { src: /tmp/install-dysk/build/x86_64-unknown-linux-gnu/dysk, architecture: x86_64 }
    - { src: /tmp/install-dysk/build/armv7-unknown-linux-gnueabihf/dysk, architecture: armv7l }
    - { src: /tmp/install-dysk/build/aarch64-unknown-linux-gnu/dysk, architecture: aarch64 }
